using System;
namespace OOPPractice
{
    public class Rectangle
    {

        int length;  // по умолчанию поля класса private
        int width;

        static int count; //переменная класса - общая для всех объектов
			//в нашем случае считает кол-во создаваемых объектов

        // для полей static свойство класса (propierties) тоже static
		public static int Count  
        {
            get { return count; }
        }
		
        public int Length
        {
            get { return length; }
        }
        public int Width
        {
            get { return width; }
        }

        //1
        //public Rectangle()
        //{
        //    this.length = 10;
        //    this.width = 15;
        //    count++;
        //}

        //2
		/*
		В примере определены 2 конструктора: 
		public Rectangle(){} и 
		public Rectangle(int length, int width){},
		которые выполняют однотипные действия - устанавливают значения полей length и width. 
		Мы можем не дублировать функциональность конструкторов, 
		а обращаться из одного конструктора к другому через ключевое слово this,
		передавая нужные значения для параметров:
		*/
        //public Rectangle() : this(10,15)
        //{
        //}
        //public Rectangle(int length, int width)
        //{
        //    if(length > 0 && width > 0)
        //    {
        //        this.length = length;
        //        this.width = width;
        //    }
        //    else
        //    {
        //        this.length = 10;
        //        this.width = 15;
        //    }

        //    count++;
        //}

        //3 - создаём один конструктор, 
		// объединяем функциональность 2-х конструкторов в один,
		//который выполняет функции конструктора по умолчанию и пользовательского 
		// частный случай перегрузки методов
		
		 //C# также позволяет использовать необязательные параметры. 
		 //Для таких параметров нам необходимо объявить значение по умолчанию.
        public Rectangle(int length = 10, int width = 15)  // входные параметры по умолчанию
        {
            if (length > 0 && width > 0)
            {
                this.length = length;
                this.width = width;
            }
            else
            {
                this.length = 10;
                this.width = 15;
            }

            count++;
        }

        public int Area()
        {
            return length * width;
        }

        public void DrawFill()
        {
            for (int i = 0; i < length; i++)
            {
                for (int j = 0; j < width; j++)
                {
                    Console.Write("*");
                }
                Console.WriteLine();
            }
            Console.WriteLine();
        }

        public void Draw()
        {
            for (int i = 1; i <= length; i++)
            {
                if (i == 1 || i == length)
                {
                    for (int j = 1; j <= width; j++)
                    {
                        Console.Write("#");
                    }
                }
                else
                {
                    for (int j = 1; j <= width; j++)
                    {
                        if (j == 1 || j == width)
                        {
                            Console.Write("#");
                        }
                        else
                        {
                            Console.Write(" ");
                        }
                    }
                
                }
                Console.WriteLine();
            }
        }//end Draw

        // переопределение метода ToString() базового класса Object
        public override string ToString()
        {
            return String.Format(
                "Rectangle : {0,4} * {1,4}", Length, Width);
        }
    }
}
